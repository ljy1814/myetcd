warehouse,inform疑点整理如下
1.registerDevice什么情况调用.
答复：应该是设备注册，在设备连云时会调用registerDevice进行注册激活。

2.warehouse_product_status 里面的status,type字段含义
答复:注册产品时使用,都是写死的默认值.

3.先入库后激活还是先激活后入库的场景问题
答复：设备需要选入库后激活。但是目前部分客户会出现先激活，这是会提示设备激活未导入，这种情况下需要让客户导入设备，并针对设备进行重启。

4.registerDevices  不开白名单,测试环境,限制50配额  
答复：测试环境你没有授权限制，但是目前测试环境每款产品只允许客户接入50个配额，超出50个不允许接入。

5反激活什么场景使用，有什么问题,工厂模式下反激活流程.
答复：反激活建议在开发环境使用，因为客户在测试环境进行测试时，很可能超出50个设备，这种情况下客户如果使用新设备接入测试变回无法接入，在这种情况下只能通过新增配额满足客户需求，因此建议增加反激活机制，可以让客户自行删减无用的设备，从而空出占用的配额。
对于工厂开机激活的设备,inspire无法区分是用户使用还是工厂开机激活的,inspire模块只会计入用户使用的设备,工厂模式下激活的设备需要在反激活之后告知inspire.


6.导入设备,配额满了前端提示信息,是否包含成功数量,导入数量.
答复：
设备授权页面在导入设备的时候，会给出四个提示：
您导入的设备数量已达到预授权上限，本次成功导入设备 [X] 个。
本次成功导入设备 [X] 个。
没有有效的设备ID。
导入失败，该产品没有有效的产品密钥。
分别的含义是：

配额数量不足，导入设备数超过了配额数。 
此时需要联系 ablecloud 工作人员添加配额。
导入设备成功的标准是： 
设备从未连接过云端（未激活过），或者设备曾经连接过云端（激活过）但未导入至白名单。此时，导入设备会被判定为成功。
导入设备成功的数量是 0。一种可能的情况是，所有导入 csv 里的设备，均已经导入过。
产品未配置公共的设备公钥。此时需在产品页面配置设备的公共秘钥。

7.listStock何处调用
答复:遗留接口

8.stockStatistics何处调用
答复:前端入库统计

9.设备授权逻辑:已连过云端不在白名单,在白名单但为连过云端,在白名单且已经连过云端.
答复：上面说的白名单为内存缓存,凡是已激活的设备在授权时都会被加入内存白名单.
已连过云不在白名单(授权导入列表)，提示激活未导入。在白名单未连云，设备未激活。在白名单且连过云，已激活。

10.applyRegistDevice接口使用场景
答复:遗留接口

11.APP列出设备,调用的那个接口(bind自身的接口),listDevices为何不调用warehouse的接口
答复：因为APP是普通用户业务逻辑，bind自身的接口查询的是用户已经绑定的设备列表，是以用户为基础条件进行查询。warehouse单纯的查询设备的信息，不涉及任何用户成分，无法使用以用户作为条件的接口，如果需要查询信息需要通过开发者的方式登录云平台才可以获取到设备信息，很显然APP并不能通过开发者的方式连云，无论是从技术还是从业务上来说都是不符合逻辑的。因此在app使用的是bind自身接口并不是warehouse接口。

12.设备心跳机制,设备频繁上下线会带来哪些问题.
答复：设备心跳是每1分钟向云端发送一次心跳检测，云端3分钟接收不到心跳就会认为设备断开。设备频繁上下线，如果是在3分钟内对于设备控制以及上报不会有什么影响，只是直观体验不是很好，如果超过3分的频繁断线则会造成控制和上报的失败。

附:基于以上的设计方式，你们即通过了云端与主机间10秒通信的方式，又通过心跳机制3分钟，来监测设备掉线的情况，是这样吗？但前者通信几次才算设备掉线呢？以哪个为准？
答复：是的，但是10秒钟监测的存在伪掉线的情况，有可能是网络环境差响应回复失败，两次后云端认为设备掉线，自动断开TCP连接，这种情况下，设备会立即重连。设备心跳丢失，云端等待
三分钟，如果接收不到设备心跳，则断开TCP连接，设备掉线。可以说10秒钟监测设备掉线的情况不一定发生心跳丢失的情况，但是心跳丢失的情况一定会发生10秒钟回复相应失败的情况。设
备掉线，应按照心跳机制为准。

13.逻辑ID什么时候创建,高并发场景重试newLogicalId,bind期望get但是可能是POST操作
答复：逻辑ID在设备连云后便会创建。
之前是设备连云不会生成逻辑ID绑定时才会生成逻辑ID,解绑后会删除逻辑ID,后来为满足客户未绑定上报的情况,更改为激活便创建逻辑ID,并且逻辑ID唯一不变.
工厂模式大量设备连接云端并未进行绑定,但是厂家希望看见上报数据,而后连云就创建逻辑ID(没有逻辑ID不允许上报数据)并上报数据.

14.设备激活,长链激活流程,短链激活流程,短链激活设备授权时为何会有一个是否允许使用时间戳的选项,为何长链激活不分配token
答复:长连接激活由gateway发起,每次设备连接gateway时都需要四次握手,而后使用长链接通信,设备下线之后断开长链接,重连时重新四次握手故不需要使用token.
短链激活由设备发起,与warehouse进行通信,如果warehouse设置了鉴权选项则需要鉴权.鉴权时有一个时间戳选项,时间戳选项用来校验设备发送请求的时间，防止重放攻击。但是对于部分功能受限设备，其可能无法获取到utc时间，也就无法携带该时间戳，所以云端添加了一个选项，是否屏蔽掉时间戳。目前linux都是有时间戳的。
鉴权完毕之后warehouse向设备分发token,token用于设备访问云端服务时过router的鉴权操作。设备端从warehouse获取到token后，使用该token进行上传文件、下载文件的操作，上传文件时，需要先从云端获取一个存储该文件的url；进行ota时，需要从云端获取ota文件的信息，如：有无crc、版本信息等。这些都是短连接，和长连接无关。
长连接保活机制：设备端每隔一分钟发送一次心跳消息，发送后，如果三十秒内没有收到回复，则计心跳丢失一次；连续计满两次后，认为失活。



15.productkey与deviceKey哪个优先
产品密钥和设备密钥是两中不同的模式,产品密钥可认为是统一密钥,设备密钥可认为是独立密钥。
如果使用统一密钥,设备连云注册都是使用的统一密钥,导入设备只需要导入ID即可,不需要公钥;使用独立密钥则需要导入公钥,私钥烧在设备里面.

16.模板何时使用,邮件模板内容审核,敏感词限制,垃圾邮件处理
答复：模板会在发送验证码或者报警短信息发送。短信敏感词的处理是由第三方（云之讯）进行过滤，关于邮件模板并不是很清楚。
对邮件内容做模板审核是我们的限制。第三方 sendcloud 或者 mailgun 没模板要求。

17.邮件如何发送,邮件服务器白名单,不同区域邮件怎么发送.inform本身受监控,inform怎么发送报警邮件,什么样的邮件被认为垃圾邮件,为何设置默认邮件发送器
inform只负责发邮件.客户发邮件时必须时必须使用模板,使用smtp直接发送的邮件会被认为是垃圾邮件.
sendcloud主要发送国内的邮件,但是也发国外的邮件.mailgun发国外,但是由于mailgun是免费的,会被别人用来发送垃圾邮件,造成其ip或者域名被加入黑名单,造成发送邮件失败,故使用onlyUse来设置默认邮件的发送方,sendcloud会对已发送的邮件进行反馈.
白名单指的是未使用onlyUse时,非白名单内的邮件服务商会使用mailgun发送邮件,白名单内的邮件服务商会使用sendcloud发送邮件.白名单是国内的邮件服务商比如qq,foxmail,163等等.

18.群发短信,群发用户或者设备的数量限制,中间出错怎么处理,网络异常怎么处理.
答复:
友盟群发使用的是customercast模式,群发限制为50.
云通讯限制每批发送的手机号不得超过200个.
sendcloud收件人不超过100个.
中间出错后打日志Warning并继续下一次发送.
网络异常目前打Warning日志并返回.

19.友盟消息推送,发邮件,发短信常见业务场景.
答复：客户设备报警信息以及某些数值的监控信息需要告知用户时需要使用推送。客户注册发送验证码或者验证短信时会使用到邮箱和短信。
报警短信,比如说开了安全锁,非常规开锁触发报警短信.验证码短信.

20.友盟消息推送机制以及平台的交互流程,友盟白名单的作用.
友盟推送机制：
   安卓：每台设备（手机）会在友盟平台注册一个device_token友盟平台通过device_token向设备（手机）推送消息。
   iOS：苹果手机有自己的推送平台，苹果手机在友盟平台上传推送证书，一个是开发证书、一个是生产证书，推送时根据device_token将消息推送给友盟，友盟会将消息推送至苹果的推送平台，苹果的推送平台会根据证书发送给对应的设备（手机）。
Able平台友盟推送逻辑：
APP登陆时会通过账号获取到userID，通过userID 在友盟设置别名，友盟会根据注册的别名生成device_token，UDS推送时调用友盟的接口，友盟那边会根据别名找到对应你的device_token通过device_token向手机推送消息，Able系统没有device_oken的概念。

不同主域alias使用厂家在友盟注册的APPKEY进行区分,所有主域alias_type为ablecloud,账号为uid,通过厂家自己注册的appkey区分,目前<appKey, aliasType, alias> 三者共同映射至某个deviceToken.














